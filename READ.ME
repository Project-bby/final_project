# מערכת אימות סיסמאות

הפרויקט הזה מיישם מערכת לאימות סיסמאות תוך שימוש במדיניות אבטחה ואלגוריתמים שונים. המערכת כוללת פונקציות עבור חישוב Hash לסיסמאות, בדיקת מורכבות הסיסמה, ומניעת שימוש חוזר בסיסמאות. המערכת גם מתקשרת עם מסד נתונים MySQL לשמירה על נתוני משתמשים.

## קבצים

### 1. `Salt_HMAC.js`

הקובץ הזה מכיל פונקציה בשם `generateHash` אשר מחושבת Hash לסיסמה תוך שילוב של Salt. הסיסמה משולבת עם ה-Salt, מקודדת ואז מתבצע חישוב Hash באמצעות אלגוריתם SHA-1, התוצאה היא Hash בהקסדצימל.

**פונקציות עיקריות:**
- `generateHash(password, salt)`: משלב את הסיסמה וה-Salt, מחשב Hash ומחזיר אותו בתצורת הקסדצימל.

### 2. `PasswordValidation.js`

הקובץ הזה מכיל את הלוגיקה המרכזית עבור אימות סיסמאות. הוא מגדיר מדיניות סיסמה שמוודאת שהסיסמה עומדת בתנאים ספציפיים כגון אורך, מורכבות ובדיקת היסטוריית סיסמאות. המדיניות נאכפת במהלך יצירת או שינוי סיסמה.

**פונקציות עיקריות:**
- **הגדרת מדיניות סיסמה**:
  - אורך מינימלי של 10 תווים.
  - דרישה לאותיות גדולות, קטנות, מספרים ותווים מיוחדים.
  - מניעת שימוש חוזר בשלוש הסיסמאות האחרונות.
  
- **פונקציה: `validatePassword(username, password)`**:
  - מאמתת את הסיסמה מול המדיניות.
  - מוודאת שהסיסמה עומדת בדרישות אורך ומורכבות.
  - בודקת אם הסיסמה שימשה בעבר במסד הנתונים ואם כן, מחזירה `false`.

### 3. `DatabaseConfig.js`

הקובץ הזה מנהל את חיבור מסד הנתונים MySQL. הוא מגדיר את בריכת החיבורים למסד הנתונים בעזרת `mysql2` ומבצע שאילתות למסד הנתונים עבור נתוני משתמשים.

**תכונות עיקריות:**
- יצירת חיבור למסד נתונים MySQL (`communication_ltd`).
- הגדרת חיבור למסד הנתונים עם פרטי חיבור כמו host, user, password ו-port.
- שימוש בספריית `mysql2` כדי לבצע שאילתות למסד הנתונים לצורך בדיקת היסטוריית סיסמאות.

**שאילתת דוגמה למסד נתונים**:
```sql
SELECT password_hash FROM users WHERE username = 'someUsername' LIMIT 3;
